name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/**'

permissions:
  actions: write  # Required for updating repository variables

jobs:
  run-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Python Tests
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.12

      - name: Install Python Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python Unit Tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          source venv/bin/activate
          pytest tests/test_app.py tests/test_preprocessing.py

      # JavaScript Tests
      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.9.0

      - name: Install Node.js Dependencies
        run: npm install

      - name: Run JavaScript Unit Tests
        run: npm test

  snyk-scan:
    name: Snyk Scan
    # Make sure scans only run if tests pass:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Snyk
        uses: snyk/actions/setup@master
        env:
          # Make sure you add SNYK_TOKEN to your repository secrets
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # 1) Python dependencies scan
      - name: Snyk Python Dependencies Scan
        run: snyk test --file=requirements.txt --package-manager=pip

      # 2) JavaScript dependencies scan
      # Adjust the command if you prefer to specify package.json or package-lock.json explicitly
      - name: Snyk JavaScript Dependencies Scan
        run: snyk test --file=package.json

      # 3) Terraform IaC scan
      # Scans both environment/dev and modules directories
      - name: Snyk Terraform IaC Scan
        run: snyk iac test infrastructure/environment/dev infrastructure/modules

  deploy-infrastructure:
    name: Deploy Infrastructure
    # Only start deployment after tests AND Snyk scans succeed
    needs: [run-tests, snyk-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.2
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: infrastructure/environment/dev
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: terraform init

      - name: Terraform Plan (ECR and ACM)
        working-directory: infrastructure/environment/dev
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
        run: terraform plan -target=module.ecr.aws_ecr_repository.ecr -target=module.acm.aws_acm_certificate.chatbot_cert

      - name: Terraform Apply (ECR and ACM)
        working-directory: infrastructure/environment/dev
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
        run: terraform apply -auto-approve -target=module.ecr.aws_ecr_repository.ecr -target=module.acm.aws_acm_certificate.chatbot_cert

      - name: Retrieve and Update ECR Repo URL
        working-directory: infrastructure/environment/dev
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PA_TOKEN }}
        run: |
          set -e
          ecr_repo_url=$(terraform output -raw ecr_repository_url || echo "")
          if [ -z "$ecr_repo_url" ]; then
            echo "::error::ECR Repository URL is empty or null"
            exit 1
          fi
          gh variable set ECR_REPO_URL --body "$ecr_repo_url"
          echo "::add-mask::$ecr_repo_url"
          echo "Successfully saved ECR_REPO_URL to repository variables."

      - name: Debug ECR Repo URL
        run: |
          echo "DEBUG: Using ECR_REPO_URL: ${{ vars.ECR_REPO_URL }}"

  build-and-push:
    name: Build & Push Docker Images
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Docker Login to ECR
        run: |
          aws ecr get-login-password --region eu-west-2 \
            | docker login --username AWS --password-stdin ${{ vars.ECR_REPO_URL }}

      - name: Build Backend Image
        run: |
          docker build -t chatbot-dev:backend-latest -f Dockerfile.backend .
          docker tag chatbot-dev:backend-latest \
            ${{ vars.ECR_REPO_URL }}:backend-latest

      - name: Push Backend Image
        run: |
          docker push ${{ vars.ECR_REPO_URL }}:backend-latest

      - name: Build Frontend Image
        run: |
          docker build -t chatbot-dev:frontend-latest -f Dockerfile.frontend .
          docker tag chatbot-dev:frontend-latest \
            ${{ vars.ECR_REPO_URL }}:frontend-latest

      - name: Push Frontend Image
        run: |
          docker push ${{ vars.ECR_REPO_URL }}:frontend-latest

  deploy-remaining:
    name: Deploy Remaining Infrastructure
    needs: [build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.2

      - name: Terraform Init
        working-directory: infrastructure/environment/dev
        run: terraform init

      - name: Terraform Apply
        working-directory: infrastructure/environment/dev
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
        run: terraform apply -auto-approve
