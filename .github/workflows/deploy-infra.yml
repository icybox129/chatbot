name: Deploy Infrastructure and Application

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  actions: write
  contents: read

jobs:
  # ----------------------------------------------------
  # 1. Run Tests
  # ----------------------------------------------------
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Python Tests
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.12'
      
      - name: Run Python Tests
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pytest tests/
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # JavaScript Tests  
      - uses: actions/setup-node@v3
        with:
          node-version: '20.9.0'
      
      - name: Run JS Tests
        run: |
          npm install
          npm test

  # ----------------------------------------------------
  # 2. Security Scans
  # ----------------------------------------------------
  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Node.js Security Scan
      - name: Snyk Node.js Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Infrastructure Security Scan  
      - name: Snyk IaC Scan
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ----------------------------------------------------
  # 3. Deploy Base Infrastructure
  # ----------------------------------------------------
  deploy-base:
    needs: security
    runs-on: ubuntu-latest
    env:
      ENV_SUFFIX: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    
    steps:
      - uses: actions/checkout@v3

      # AWS Authentication
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      # Terraform Setup & Deploy
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.10.2'
          terraform_wrapper: false

      - name: Deploy ECR & ACM
        working-directory: infrastructure/environment/${{ env.ENV_SUFFIX }}
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
        run: |
          terraform init
          terraform apply -auto-approve \
            -target=module.ecr.aws_ecr_repository.ecr \
            -target=module.acm.aws_acm_certificate.chatbot_cert

      - name: Save ECR URL
        run: |
          terraform output -raw ecr_repository_url > ecr_repo_url.txt
          
      - uses: actions/upload-artifact@v3
        with:
          name: ecr-url-artifact
          path: ecr_repo_url.txt

  # ----------------------------------------------------
  # 4. Build & Push Docker Images
  # ----------------------------------------------------
  docker:
    needs: deploy-base
    runs-on: ubuntu-latest
    env:
      ENV_SUFFIX: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
      TAG: ${GITHUB_SHA::7}
    
    steps:
      - uses: actions/checkout@v3

      # AWS Authentication
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      # Get ECR URL
      - uses: actions/download-artifact@v3
        with:
          name: ecr-url-artifact

      # ECR Login
      - name: Login to ECR
        run: |
          ECR_URL=$(cat ecr_repo_url.txt)
          aws ecr get-login-password | docker login --username AWS --password-stdin "$ECR_URL"

      # Build & Push Backend
      - name: Backend Image
        run: |
          ECR_URL=$(cat ecr_repo_url.txt)
          docker build -t ${{ env.ENV_SUFFIX }}-chatbot:backend-${{ env.TAG }} -f Dockerfile.backend .
          docker tag ${{ env.ENV_SUFFIX }}-chatbot:backend-${{ env.TAG }} "$ECR_URL:backend-latest"
          docker tag ${{ env.ENV_SUFFIX }}-chatbot:backend-${{ env.TAG }} "$ECR_URL:backend-${{ env.TAG }}"
          docker push "$ECR_URL:backend-latest"
          docker push "$ECR_URL:backend-${{ env.TAG }}"

      # Build & Push Frontend
      - name: Frontend Image
        run: |
          ECR_URL=$(cat ecr_repo_url.txt)
          docker build -t ${{ env.ENV_SUFFIX }}-chatbot:frontend-${{ env.TAG }} -f Dockerfile.frontend .
          docker tag ${{ env.ENV_SUFFIX }}-chatbot:frontend-${{ env.TAG }} "$ECR_URL:frontend-latest"
          docker tag ${{ env.ENV_SUFFIX }}-chatbot:frontend-${{ env.TAG }} "$ECR_URL:frontend-${{ env.TAG }}"
          docker push "$ECR_URL:frontend-latest"
          docker push "$ECR_URL:frontend-${{ env.TAG }}"

  # ----------------------------------------------------
  # 5. Deploy Application Infrastructure
  # ----------------------------------------------------
  deploy-app:
    needs: docker
    runs-on: ubuntu-latest
    env:
      ENV_SUFFIX: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.10.2'

      - name: Deploy Remaining Infrastructure
        working-directory: infrastructure/environment/${{ env.ENV_SUFFIX }}
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
        run: |
          terraform init
          terraform apply -auto-approve