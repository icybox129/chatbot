name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  actions: write
  contents: read

jobs:
  # ------------------------------------------------------------------------
  # 1) Run Unit Tests (Python + JavaScript)
  # ------------------------------------------------------------------------
  run-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # ------------------ Python Tests ------------------ #
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.12

      - name: Install Python Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python Unit Tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          source venv/bin/activate
          pytest tests/test_app.py tests/test_preprocessing.py

      # ------------------ JavaScript Tests ------------------ #
      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.9.0

      - name: Install Node.js Dependencies
        run: npm install

      - name: Run JavaScript Unit Tests
        run: npm test

  # ------------------------------------------------------------------------
  # 2) Snyk Scans (Python, Node.js, and Terraform IaC)
  # ------------------------------------------------------------------------
  snyk-scan:
    name: Snyk Scan
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # ------------------ Node.js Dependencies Scan ------------------ #
      - name: Install Node.js Dependencies for Snyk
        run: npm install

      - name: Run Snyk Node.js Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # ------------------ Terraform IaC Scan ------------------ #
      - name: Run Snyk Terraform IaC Scan
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: false  # or true if you want to ignore high-severity issues

  # ------------------------------------------------------------------------
  # 3) Deploy Infrastructure (ECR and ACM)
  #    - Split out the "registry" domain and the "repository" from Terraform output
  # ------------------------------------------------------------------------
  deploy-infrastructure:
    name: Deploy ECR & ACM
    needs: snyk-scan
    runs-on: ubuntu-latest

    # Dynamically set ENV_SUFFIX based on branch
    env:
      ENV_SUFFIX: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

    # Expose job outputs (registry and repository)
    outputs:
      registry: ${{ steps.retrieve_ecr.outputs.registry_name }}
      repository: ${{ steps.retrieve_ecr.outputs.repository_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.2
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: infrastructure/environment/${{ env.ENV_SUFFIX }}
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: terraform init

      - name: Terraform Plan (ECR and ACM)
        working-directory: infrastructure/environment/${{ env.ENV_SUFFIX }}
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
        run: |
          terraform plan \
            -target=module.ecr.aws_ecr_repository.ecr \
            -target=module.acm.aws_acm_certificate.chatbot_cert

      - name: Terraform Apply (ECR and ACM)
        working-directory: infrastructure/environment/${{ env.ENV_SUFFIX }}
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
        run: |
          terraform apply -auto-approve \
            -target=module.ecr.aws_ecr_repository.ecr \
            -target=module.acm.aws_acm_certificate.chatbot_cert

      - name: Retrieve ECR Registry and Repo
        id: retrieve_ecr
        working-directory: infrastructure/environment/${{ env.ENV_SUFFIX }}
        run: |
          set -e
          ecr_url="$(terraform output -raw ecr_repository_url || echo "")"
          if [ -z "$ecr_url" ]; then
            echo "::error::ECR Repository URL is empty or null"
            exit 1
          fi

          # Split domain vs. repo name
          # e.g. "123456789012.dkr.ecr.eu-west-2.amazonaws.com/chatbot-dev"
          # -> registry_name="123456789012.dkr.ecr.eu-west-2.amazonaws.com"
          #    repository_name="chatbot-dev"
          registry_name="${ecr_url%%/*}"
          repository_name="${ecr_url#*/}"

          echo "registry_name=$registry_name" >> $GITHUB_OUTPUT
          echo "repository_name=$repository_name" >> $GITHUB_OUTPUT

      - name: Debug ECR Values
        run: |
          echo "Registry Name: ${{ steps.retrieve_ecr.outputs.registry_name }}"
          echo "Repository Name: ${{ steps.retrieve_ecr.outputs.repository_name }}"

  # ------------------------------------------------------------------------
  # 4) Build & Push Docker Images
  #    - Use the registry domain for "docker login"
  #    - Use registry/repository for "docker build/tag/push"
  # ------------------------------------------------------------------------
  build-and-push:
    name: Build & Push Docker Images
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    env:
      ENV_SUFFIX: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Create unique Docker tag
        id: docker_tag
        run: echo "TAG=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      - name: Debug registry variable
        run: echo "REGISTRY = '${{ needs.deploy-infrastructure.outputs.registry }}'"
      
      - name: Docker Login to ECR
        run: docker login --username AWS --password-stdin ${{ needs.deploy-infrastructure.outputs.registry }}

      - name: Build Backend Image
        run: |
          # Build a local image first:
          docker build \
            -t ${{ env.ENV_SUFFIX }}-chatbot:backend-${{ env.TAG }} \
            -f Dockerfile.backend .

          # Tag it with the final ECR location
          # registry + repository
          docker tag \
            ${{ env.ENV_SUFFIX }}-chatbot:backend-${{ env.TAG }} \
            ${{ needs.deploy-infrastructure.outputs.registry }}/${{ needs.deploy-infrastructure.outputs.repository }}:backend-latest

          docker tag \
            ${{ env.ENV_SUFFIX }}-chatbot:backend-${{ env.TAG }} \
            ${{ needs.deploy-infrastructure.outputs.registry }}/${{ needs.deploy-infrastructure.outputs.repository }}:backend-${{ env.TAG }}

      - name: Push Backend Image
        run: |
          docker push ${{ needs.deploy-infrastructure.outputs.registry }}/${{ needs.deploy-infrastructure.outputs.repository }}:backend-latest
          docker push ${{ needs.deploy-infrastructure.outputs.registry }}/${{ needs.deploy-infrastructure.outputs.repository }}:backend-${{ env.TAG }}

      - name: Build Frontend Image
        run: |
          # Build the local image
          docker build \
            -t ${{ env.ENV_SUFFIX }}-chatbot:frontend-${{ env.TAG }} \
            -f Dockerfile.frontend .

          docker tag \
            ${{ env.ENV_SUFFIX }}-chatbot:frontend-${{ env.TAG }} \
            ${{ needs.deploy-infrastructure.outputs.registry }}/${{ needs.deploy-infrastructure.outputs.repository }}:frontend-latest

          docker tag \
            ${{ env.ENV_SUFFIX }}-chatbot:frontend-${{ env.TAG }} \
            ${{ needs.deploy-infrastructure.outputs.registry }}/${{ needs.deploy-infrastructure.outputs.repository }}:frontend-${{ env.TAG }}

      - name: Push Frontend Image
        run: |
          docker push ${{ needs.deploy-infrastructure.outputs.registry }}/${{ needs.deploy-infrastructure.outputs.repository }}:frontend-latest
          docker push ${{ needs.deploy-infrastructure.outputs.registry }}/${{ needs.deploy-infrastructure.outputs.repository }}:frontend-${{ env.TAG }}

  # ------------------------------------------------------------------------
  # 5) Deploy Remaining Infrastructure
  # ------------------------------------------------------------------------
  deploy-remaining:
    name: Deploy Remaining Infrastructure
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      ENV_SUFFIX: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.2

      - name: Terraform Init
        working-directory: infrastructure/environment/${{ env.ENV_SUFFIX }}
        run: terraform init

      - name: Terraform Apply
        working-directory: infrastructure/environment/${{ env.ENV_SUFFIX }}
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
        run: terraform apply -auto-approve
