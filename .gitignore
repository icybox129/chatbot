# Ignore node_modules folder (for Node.js projects)
node_modules/

# Ignore log files
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Ignore build directories
dist/
build/

# Ignore python virtual environment
venv/
.venv/

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Ignore environment variable files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Ignore temporary files
*.tmp
*.temp
*.swp
*.swo

# Ignore OS generated files
.DS_Store
Thumbs.db

# Ignore IDE or editor-specific files
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# Ignore compiled Python files (for Python projects)
__pycache__/
*.py[cod]
*.pyc

# Ignore Java compiled files (for Java projects)
*.class
*.jar
*.war
*.ear

# Ignore macOS ._ files
._*

# Ignore coverage reports
coverage/

# Ignore other system files
*.iml
*.out
*.bak
*.sql
*.sqlite
*.ssh

# Ignore Chroma and SQLite files
chroma/
*.sqlite3
